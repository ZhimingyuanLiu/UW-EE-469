module movz(shamt,imm16,multOutLow,result);
	input logic [63:0] shamt;
	
	input logic [15:0] imm16;
	output logic [63:0] multOutLow;
	
	output logic[63:0] result;
	
	logic [63:0] multOutHigh;
	logic [4:0] shiftAmount;
	logic [63:0] Imm64;

	mult one(shamt, 16, 1'b0, multOutLow, multOutHigh); 

	assign shifAmount = multOutLow[4:0];
	
	assign Imm64 = {48'b0, imm16};

	shifter moveIt(Imm64, 1'b0, shiftAmount, result);

endmodule 


module movk(imm16,RegRd,multOutLow, result);
input logic [15:0] imm16;
input logic [63:0] RegRd;
input logic [63:0] multOutLow;

output logic [63:0] result;
    
	 
	logic [63:0] aligned_address;
	logic [63:0] temp;
	initial begin
	temp = RegRd;
	end
	
	assign aligned_address = multOutLow +16;
	integer i;
	always_comb begin
		for(i= multOutLow; i<aligned_address; i++)
				temp[i] = imm16[i-multOutLow];
		end
assign result = temp;

endmodule 
